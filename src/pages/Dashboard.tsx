
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { useDashboardProjects } from '@/hooks/useDashboardProjects';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FileText, NotebookPen, Network } from 'lucide-react';
import { Note } from '@/lib/types';
import { toast } from '@/components/ui/use-toast';
import { useAuth } from '@/App';
import { supabase } from '@/integrations/supabase/client';

// Import the tab components
import ScreenplaysTab from '@/components/dashboard/ScreenplaysTab';
import NotesTab from '@/components/dashboard/NotesTab';
import StructuresTab from '@/components/dashboard/StructuresTab';
import DeleteStructureDialog from '@/components/dashboard/DeleteStructureDialog';

const Dashboard = () => {
  const { session } = useAuth();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const tabFromQuery = queryParams.get('tab');
  
  const {
    projects,
    notes,
    searchQuery,
    setSearchQuery,
    isLoading,
    handleCreateNewProject,
    handleDeleteProject,
    handleCreateNote,
    handleDeleteNote,
    handleUpdateNote
  } = useDashboardProjects();
  
  const [activeTab, setActiveTab] = useState(tabFromQuery || "screenplays");
  const [notesSearchQuery, setNotesSearchQuery] = useState("");
  const [structuresSearchQuery, setStructuresSearchQuery] = useState("");
  const [isLoadingNotes, setIsLoadingNotes] = useState(false);
  const [selectedNote, setSelectedNote] = useState<Note | null>(null);
  const [isNoteEditorOpen, setIsNoteEditorOpen] = useState(false);
  const [currentNote, setCurrentNote] = useState<Note | null>(null);
  const [structures, setStructures] = useState<{projectId: string, projectTitle: string, structure: ThreeActStructure}[]>([]);
  const [isLoadingStructures, setIsLoadingStructures] = useState(false);
  const [hasInitializedStructures, setHasInitializedStructures] = useState(false);
  const [structureToDelete, setStructureToDelete] = useState<string | null>(null);

  console.log('Dashboard - available notes:', notes?.length || 0);

  useEffect(() => {
    // Set active tab from URL query parameter
    if (tabFromQuery && ['screenplays', 'notes', 'structures'].includes(tabFromQuery)) {
      setActiveTab(tabFromQuery);
    }
  }, [tabFromQuery]);

  useEffect(() => {
    if (activeTab === "structures" && session && projects.length > 0 && !hasInitializedStructures) {
      fetchStructures();
    }
  }, [activeTab, session, projects, hasInitializedStructures]);

  // Update URL when tab changes
  useEffect(() => {
    const newUrl = `${window.location.pathname}?tab=${activeTab}`;
    window.history.replaceState({}, '', newUrl);
  }, [activeTab]);

  const fetchStructures = async () => {
    if (!session || !projects.length) return;
    
    setIsLoadingStructures(true);
    try {
      const structuresData = [];
      
      for (const project of projects) {
        const { data, error } = await supabase
          .from('projects')
          .select('notes')
          .eq('id', project.id)
          .eq('author_id', session.user.id)
          .single();
          
        if (error) {
          console.error('Error fetching structure:', error);
          continue;
        }
        
        if (data?.notes && Array.isArray(data.notes)) {
          const structureNote = data.notes.find((note: any) => 
            note && 
            typeof note === 'object' && 
            'id' in note && 
            typeof note.id === 'string' && 
            note.id.startsWith('structure-')
          );
          
          if (structureNote) {
            structuresData.push({
              projectId: project.id,
              projectTitle: project.title,
              structure: structureNote as unknown as ThreeActStructure
            });
          }
        }
      }
      
      setStructures(structuresData);
      setHasInitializedStructures(true);
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: 'Error',
        description: 'Failed to load structures',
        variant: 'destructive',
      });
    } finally {
      setIsLoadingStructures(false);
    }
  };

  const filteredNotes = notes?.filter(note => 
    note.title.toLowerCase().includes(notesSearchQuery.toLowerCase()) || 
    note.content.toLowerCase().includes(notesSearchQuery.toLowerCase())
  ) || [];

  const filteredStructures = structures.filter(item => 
    item.projectTitle.toLowerCase().includes(structuresSearchQuery.toLowerCase())
  );

  const handleCreateNoteFromPopover = (noteData: Partial<Note>) => {
    const newNote: Note = {
      id: '', // Empty ID for new notes, will be generated by the handler
      title: noteData.title || 'Untitled Note',
      content: noteData.content || '',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    handleCreateNote(newNote);
  };

  const handleViewNote = (note: Note) => {
    setSelectedNote(note);
    toast({
      title: "Note details",
      description: note.content.substring(0, 150) + (note.content.length > 150 ? '...' : '')
    });
  };

  const handleEditNote = (note: Note) => {
    setCurrentNote(note);
    setIsNoteEditorOpen(true);
  };

  const handleSaveNote = (updatedNote: Note) => {
    if (updatedNote.id) {
      handleUpdateNote(updatedNote);
    } else {
      handleCreateNote(updatedNote);
    }
    setIsNoteEditorOpen(false);
    setCurrentNote(null);
  };

  const handleCreateNewNote = () => {
    setCurrentNote(null);
    setIsNoteEditorOpen(true);
  };

  const createNewStructure = () => {
    if (projects.length === 0) {
      toast({
        title: "No projects found",
        description: "You need to create a project first before adding a structure.",
        variant: "destructive"
      });
      return;
    }
    
    const firstProject = projects[0];
    window.location.href = `/structure/${firstProject.id}`;
  };

  const handleDeleteStructure = async (projectId: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setStructureToDelete(projectId);
  };

  const confirmDeleteStructure = async () => {
    if (!structureToDelete || !session) return;
    
    try {
      const { data: projectData, error: fetchError } = await supabase
        .from('projects')
        .select('notes')
        .eq('id', structureToDelete)
        .eq('author_id', session.user.id)
        .single();
      
      if (fetchError) {
        console.error('Error fetching project:', fetchError);
        toast({
          title: 'Error',
          description: 'Failed to delete structure',
          variant: 'destructive',
        });
        return;
      }
      
      let notes = Array.isArray(projectData?.notes) ? [...projectData.notes] : [];
      notes = notes.filter((note: any) => 
        !(note && 
          typeof note === 'object' && 
          'id' in note && 
          typeof note.id === 'string' && 
          note.id.startsWith('structure-'))
      );
      
      const { error: updateError } = await supabase
        .from('projects')
        .update({
          notes: notes,
          updated_at: new Date().toISOString(),
        })
        .eq('id', structureToDelete)
        .eq('author_id', session.user.id);
      
      if (updateError) {
        console.error('Error updating project:', updateError);
        toast({
          title: 'Error',
          description: 'Failed to delete structure',
          variant: 'destructive',
        });
        return;
      }
      
      setStructures(structures.filter(item => item.projectId !== structureToDelete));
      
      toast({
        title: 'Success',
        description: 'Structure deleted successfully',
      });
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete structure',
        variant: 'destructive',
      });
    } finally {
      setStructureToDelete(null);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-grow pt-24 pb-16">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-8 text-left font-serif">My Projects</h1>
          
          <Tabs defaultValue="screenplays" value={activeTab} onValueChange={setActiveTab} className="mb-8">
            <TabsList className="grid grid-cols-3 mb-8 w-full max-w-md mx-auto">
              <TabsTrigger value="screenplays" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                <span>Screenplays</span>
              </TabsTrigger>
              <TabsTrigger value="notes" className="flex items-center gap-2">
                <NotebookPen className="h-4 w-4" />
                <span>Notes</span>
              </TabsTrigger>
              <TabsTrigger value="structures" className="flex items-center gap-2">
                <Network className="h-4 w-4" />
                <span>Structures</span>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="screenplays" className="mt-6">
              <ScreenplaysTab
                projects={projects}
                searchQuery={searchQuery}
                setSearchQuery={setSearchQuery}
                isLoading={isLoading}
                handleCreateNewProject={handleCreateNewProject}
                handleDeleteProject={handleDeleteProject}
              />
            </TabsContent>
            
            <TabsContent value="notes" className="mt-6">
              <NotesTab
                notes={filteredNotes}
                searchQuery={notesSearchQuery}
                setSearchQuery={setNotesSearchQuery}
                isLoading={isLoadingNotes}
                handleCreateNote={handleCreateNewNote}
                handleDeleteNote={handleDeleteNote}
                handleViewNote={handleViewNote}
                handleEditNote={handleEditNote}
                isNoteEditorOpen={isNoteEditorOpen}
                setIsNoteEditorOpen={setIsNoteEditorOpen}
                currentNote={currentNote}
                handleSaveNote={handleSaveNote}
              />
            </TabsContent>
            
            <TabsContent value="structures" className="mt-6">
              <StructuresTab
                structures={filteredStructures}
                searchQuery={structuresSearchQuery}
                setSearchQuery={setStructuresSearchQuery}
                isLoading={isLoadingStructures}
                createNewStructure={createNewStructure}
                handleDeleteStructure={handleDeleteStructure}
              />
            </TabsContent>
          </Tabs>
        </div>
      </main>
      
      <Footer />
      
      <DeleteStructureDialog
        open={!!structureToDelete}
        onOpenChange={(open) => !open && setStructureToDelete(null)}
        onConfirm={confirmDeleteStructure}
      />
    </div>
  );
};

export default Dashboard;
