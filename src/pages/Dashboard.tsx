
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { useDashboardProjects } from '@/hooks/useDashboardProjects';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FileText, NotebookPen, Network } from 'lucide-react';
import { Note } from '@/lib/types';
import { toast } from '@/components/ui/use-toast';
import { useAuth } from '@/App';

// Import the tab components
import ScreenplaysTab from '@/components/dashboard/ScreenplaysTab';
import NotesTab from '@/components/dashboard/NotesTab';
import StructuresTab from '@/components/dashboard/StructuresTab';

const Dashboard = () => {
  const { session } = useAuth();
  const location = useLocation();
  const navigate = useNavigate();
  const queryParams = new URLSearchParams(location.search);
  const tabFromQuery = queryParams.get('tab');
  
  const {
    projects,
    notes,
    searchQuery,
    setSearchQuery,
    isLoading,
    handleCreateNewProject,
    handleDeleteProject,
    handleCreateNote,
    handleDeleteNote,
    handleUpdateNote
  } = useDashboardProjects();
  
  const [activeTab, setActiveTab] = useState(tabFromQuery || "screenplays");
  const [notesSearchQuery, setNotesSearchQuery] = useState("");
  const [structuresSearchQuery, setStructuresSearchQuery] = useState("");
  const [isLoadingNotes, setIsLoadingNotes] = useState(false);
  const [selectedNote, setSelectedNote] = useState<Note | null>(null);
  const [isNoteEditorOpen, setIsNoteEditorOpen] = useState(false);
  const [currentNote, setCurrentNote] = useState<Note | null>(null);

  console.log('Dashboard - available notes:', notes?.length || 0);

  useEffect(() => {
    if (tabFromQuery && ['screenplays', 'notes', 'structures'].includes(tabFromQuery)) {
      setActiveTab(tabFromQuery);
    }
  }, [tabFromQuery]);

  useEffect(() => {
    const newUrl = `${window.location.pathname}?tab=${activeTab}`;
    window.history.replaceState({}, '', newUrl);
  }, [activeTab]);

  const filteredNotes = notes?.filter(note => 
    note.title.toLowerCase().includes(notesSearchQuery.toLowerCase()) || 
    note.content.toLowerCase().includes(notesSearchQuery.toLowerCase())
  ) || [];

  const handleCreateNoteFromPopover = (noteData: Partial<Note>) => {
    const newNote: Note = {
      id: '', // Empty ID for new notes, will be generated by the handler
      title: noteData.title || 'Untitled Note',
      content: noteData.content || '',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    handleCreateNote(newNote);
  };

  const handleViewNote = (note: Note) => {
    setSelectedNote(note);
    toast({
      title: "Note details",
      description: note.content.substring(0, 150) + (note.content.length > 150 ? '...' : '')
    });
  };

  const handleEditNote = (note: Note) => {
    setCurrentNote(note);
    setIsNoteEditorOpen(true);
  };

  const handleSaveNote = (updatedNote: Note) => {
    if (updatedNote.id) {
      handleUpdateNote(updatedNote);
    } else {
      handleCreateNote(updatedNote);
    }
    setIsNoteEditorOpen(false);
    setCurrentNote(null);
  };

  const handleCreateNewNote = () => {
    setCurrentNote(null);
    setIsNoteEditorOpen(true);
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-grow pt-24 pb-16">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-8 text-left font-serif">My Projects</h1>
          
          <Tabs defaultValue="screenplays" value={activeTab} onValueChange={setActiveTab} className="mb-8">
            <TabsList className="grid grid-cols-3 mb-8 w-full max-w-md mx-auto">
              <TabsTrigger value="screenplays" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                <span>Screenplays</span>
              </TabsTrigger>
              <TabsTrigger value="notes" className="flex items-center gap-2">
                <NotebookPen className="h-4 w-4" />
                <span>Notes</span>
              </TabsTrigger>
              <TabsTrigger value="structures" className="flex items-center gap-2">
                <Network className="h-4 w-4" />
                <span>Structures</span>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="screenplays" className="mt-6">
              <ScreenplaysTab
                projects={projects}
                searchQuery={searchQuery}
                setSearchQuery={setSearchQuery}
                isLoading={isLoading}
                handleCreateNewProject={handleCreateNewProject}
                handleDeleteProject={handleDeleteProject}
              />
            </TabsContent>
            
            <TabsContent value="notes" className="mt-6">
              <NotesTab
                notes={filteredNotes}
                searchQuery={notesSearchQuery}
                setSearchQuery={setNotesSearchQuery}
                isLoading={isLoadingNotes}
                handleCreateNote={handleCreateNewNote}
                handleDeleteNote={handleDeleteNote}
                handleViewNote={handleViewNote}
                handleEditNote={handleEditNote}
                isNoteEditorOpen={isNoteEditorOpen}
                setIsNoteEditorOpen={setIsNoteEditorOpen}
                currentNote={currentNote}
                handleSaveNote={handleSaveNote}
              />
            </TabsContent>
            
            <TabsContent value="structures" className="mt-6">
              <StructuresTab
                structureSearchQuery={structuresSearchQuery}
                setStructureSearchQuery={setStructuresSearchQuery}
              />
            </TabsContent>
          </Tabs>
        </div>
      </main>
      
      <Footer />
    </div>
  );
};

export default Dashboard;
