
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { useDashboardProjects } from '@/hooks/useDashboardProjects';
import DashboardHeader from '@/components/dashboard/DashboardHeader';
import ProjectGrid from '@/components/dashboard/ProjectGrid';
import EmptyState from '@/components/dashboard/EmptyState';
import LoadingState from '@/components/dashboard/LoadingState';
import NotesGrid from '@/components/dashboard/NotesGrid';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FileText, NotebookPen, Network } from 'lucide-react';
import { useState, useEffect } from 'react';
import { toast } from '@/components/ui/use-toast';
import { Note, ThreeActStructure } from '@/lib/types';
import NotePopover from '@/components/notes/NotePopover';
import NoteEditor from '@/components/notes/NoteEditor';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/App';
import { supabase } from '@/integrations/supabase/client';
import { Link } from 'react-router-dom';
import { Skeleton } from '@/components/ui/skeleton';

const Dashboard = () => {
  const { session } = useAuth();
  const {
    projects,
    notes,
    searchQuery,
    setSearchQuery,
    isLoading,
    handleCreateNewProject,
    handleDeleteProject,
    handleCreateNote,
    handleDeleteNote,
    handleUpdateNote
  } = useDashboardProjects();
  
  const [activeTab, setActiveTab] = useState("screenplays");
  const [notesSearchQuery, setNotesSearchQuery] = useState("");
  const [structuresSearchQuery, setStructuresSearchQuery] = useState("");
  const [isLoadingNotes, setIsLoadingNotes] = useState(false);
  const [selectedNote, setSelectedNote] = useState<Note | null>(null);
  const [isNoteEditorOpen, setIsNoteEditorOpen] = useState(false);
  const [currentNote, setCurrentNote] = useState<Note | null>(null);
  const [structures, setStructures] = useState<{projectId: string, projectTitle: string, structure: ThreeActStructure}[]>([]);
  const [isLoadingStructures, setIsLoadingStructures] = useState(false);
  const [hasInitializedStructures, setHasInitializedStructures] = useState(false);

  console.log('Dashboard - available notes:', notes?.length || 0);

  useEffect(() => {
    if (activeTab === "structures" && session && projects.length > 0 && !hasInitializedStructures) {
      fetchStructures();
    }
  }, [activeTab, session, projects, hasInitializedStructures]);

  const fetchStructures = async () => {
    if (!session || !projects.length) return;
    
    setIsLoadingStructures(true);
    try {
      const structuresData = [];
      
      for (const project of projects) {
        const { data, error } = await supabase
          .from('projects')
          .select('notes')
          .eq('id', project.id)
          .eq('author_id', session.user.id)
          .single();
          
        if (error) {
          console.error('Error fetching structure:', error);
          continue;
        }
        
        // Check if there's a three-act structure in the notes
        if (data?.notes && Array.isArray(data.notes)) {
          // Look for a note that contains the structure data
          const structureNote = data.notes.find((note: any) => 
            note && 
            typeof note === 'object' && 
            'id' in note && 
            typeof note.id === 'string' && 
            note.id.startsWith('structure-')
          );
          
          if (structureNote) {
            structuresData.push({
              projectId: project.id,
              projectTitle: project.title,
              structure: structureNote as unknown as ThreeActStructure
            });
          }
        }
      }
      
      setStructures(structuresData);
      setHasInitializedStructures(true);
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: 'Error',
        description: 'Failed to load structures',
        variant: 'destructive',
      });
    } finally {
      setIsLoadingStructures(false);
    }
  };

  const filteredNotes = notes?.filter(note => 
    note.title.toLowerCase().includes(notesSearchQuery.toLowerCase()) || 
    note.content.toLowerCase().includes(notesSearchQuery.toLowerCase())
  ) || [];

  const filteredStructures = structures.filter(item => 
    item.projectTitle.toLowerCase().includes(structuresSearchQuery.toLowerCase())
  );

  const handleCreateNoteFromPopover = (noteData: Partial<Note>) => {
    const newNote: Note = {
      id: '', // Empty ID for new notes, will be generated by the handler
      title: noteData.title || 'Untitled Note',
      content: noteData.content || '',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    handleCreateNote(newNote);
  };

  const handleViewNote = (note: Note) => {
    setSelectedNote(note);
    toast({
      title: "Note details",
      description: note.content.substring(0, 150) + (note.content.length > 150 ? '...' : '')
    });
  };

  const handleEditNote = (note: Note) => {
    setCurrentNote(note);
    setIsNoteEditorOpen(true);
  };

  const handleSaveNote = (updatedNote: Note) => {
    if (updatedNote.id) {
      // This is an existing note being updated
      handleUpdateNote(updatedNote);
    } else {
      // This is a new note
      handleCreateNote(updatedNote);
    }
    setIsNoteEditorOpen(false);
    setCurrentNote(null);
  };

  const handleCreateNewNote = () => {
    setCurrentNote(null); // Ensure we're creating a new note
    setIsNoteEditorOpen(true);
  };

  const createNewStructure = () => {
    if (projects.length === 0) {
      toast({
        title: "No projects found",
        description: "You need to create a project first before adding a structure.",
        variant: "destructive"
      });
      return;
    }
    
    // Navigate to structure page of the first project
    const firstProject = projects[0];
    window.location.href = `/structure/${firstProject.id}`;
  };
  
  // Structure placeholder skeleton for loading state
  const StructurePlaceholder = () => (
    <div className="border rounded-lg p-4 hover:border-primary/70 transition-colors bg-white">
      <div className="flex justify-between items-start mb-2">
        <Skeleton className="h-6 w-40" />
        <Skeleton className="h-6 w-6 rounded" />
      </div>
      <Skeleton className="h-4 w-32 mb-3" />
      <div className="grid grid-cols-3 gap-1 mb-3">
        <Skeleton className="h-2 w-full" />
        <Skeleton className="h-2 w-full" />
        <Skeleton className="h-2 w-full" />
      </div>
      <Skeleton className="h-3 w-24" />
    </div>
  );

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-grow pt-24 pb-16">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-8 text-left font-serif">My Projects</h1>
          
          <Tabs defaultValue="screenplays" value={activeTab} onValueChange={setActiveTab} className="mb-8">
            <TabsList className="grid grid-cols-3 mb-8 w-full max-w-md mx-auto">
              <TabsTrigger value="screenplays" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                <span>Screenplays</span>
              </TabsTrigger>
              <TabsTrigger value="notes" className="flex items-center gap-2">
                <NotebookPen className="h-4 w-4" />
                <span>Notes</span>
              </TabsTrigger>
              <TabsTrigger value="structures" className="flex items-center gap-2">
                <Network className="h-4 w-4" />
                <span>Structures</span>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="screenplays" className="mt-6">
              <DashboardHeader 
                searchQuery={searchQuery}
                setSearchQuery={setSearchQuery}
                onCreateNewProject={handleCreateNewProject}
                projectType="screenplay"
              />
              
              {isLoading ? (
                <LoadingState />
              ) : projects.length > 0 ? (
                <ProjectGrid 
                  projects={projects} 
                  onDeleteProject={handleDeleteProject} 
                />
              ) : (
                <EmptyState 
                  searchQuery={searchQuery}
                  clearSearch={() => setSearchQuery('')}
                  createNewProject={handleCreateNewProject}
                  emptyMessage="No screenplays yet"
                  createMessage="Create your first screenplay"
                />
              )}
            </TabsContent>
            
            <TabsContent value="notes" className="mt-6">
              <DashboardHeader 
                searchQuery={notesSearchQuery} 
                setSearchQuery={setNotesSearchQuery}
                onCreateNewProject={handleCreateNewNote}
                projectType="note"
                customCreateButton={
                  <Button onClick={handleCreateNewNote}>Create New Note</Button>
                }
              />
              
              {isLoadingNotes ? (
                <LoadingState />
              ) : filteredNotes.length > 0 ? (
                <NotesGrid 
                  notes={filteredNotes} 
                  onDeleteNote={handleDeleteNote} 
                  onViewNote={handleViewNote}
                  onEditNote={handleEditNote}
                />
              ) : (
                <EmptyState 
                  searchQuery={notesSearchQuery}
                  clearSearch={() => setNotesSearchQuery('')}
                  createNewProject={handleCreateNewNote}
                  emptyMessage="No notes yet"
                  createMessage="Create your first note"
                />
              )}
              
              <NoteEditor 
                open={isNoteEditorOpen}
                onOpenChange={setIsNoteEditorOpen}
                note={currentNote}
                onSaveNote={handleSaveNote}
              />
            </TabsContent>
            
            <TabsContent value="structures" className="mt-6">
              <DashboardHeader 
                searchQuery={structuresSearchQuery} 
                setSearchQuery={setStructuresSearchQuery}
                onCreateNewProject={createNewStructure}
                projectType="structure"
                customCreateButton={
                  <Button onClick={createNewStructure}>Create New Structure</Button>
                }
              />
              
              {isLoadingStructures ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {[1, 2, 3].map((i) => (
                    <StructurePlaceholder key={i} />
                  ))}
                </div>
              ) : filteredStructures.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {filteredStructures.map((item) => (
                    <Link 
                      to={`/structure/${item.projectId}`} 
                      key={item.structure.id}
                      className="block"
                    >
                      <div className="border rounded-lg p-4 hover:border-primary/70 transition-colors bg-white">
                        <div className="flex justify-between items-start mb-2">
                          <h3 className="font-medium text-lg">{item.projectTitle}</h3>
                          <div className="bg-primary/10 p-1 rounded">
                            <Network className="h-4 w-4 text-primary" />
                          </div>
                        </div>
                        <p className="text-sm text-muted-foreground mb-3">
                          Three-Act Structure
                        </p>
                        <div className="grid grid-cols-3 gap-1 mb-3">
                          <div className="bg-purple-100 h-2 rounded"></div>
                          <div className="bg-blue-100 h-2 rounded"></div>
                          <div className="bg-green-100 h-2 rounded"></div>
                        </div>
                        <div className="text-xs text-muted-foreground">
                          Updated {new Date(item.structure.updatedAt).toLocaleDateString()}
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              ) : (
                <div className="border border-border rounded-lg p-8 mt-4 bg-card">
                  <div className="text-center max-w-md mx-auto">
                    <Network className="h-16 w-16 text-muted-foreground mb-4 mx-auto" />
                    <h3 className="text-2xl font-medium mb-2">Story Structure Tools</h3>
                    <p className="text-muted-foreground mb-6">
                      Break down your screenplay using classic story structures or create your own custom
                      templates with interactive scene cards and direct script linking.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-left text-sm mb-6">
                      <div className="flex items-start gap-2">
                        <div className="bg-primary/10 p-2 rounded-full">
                          <Network className="h-4 w-4 text-primary" />
                        </div>
                        <div>
                          <p className="font-medium">Story Templates</p>
                          <p className="text-muted-foreground">3-Act, Hero's Journey, Save the Cat</p>
                        </div>
                      </div>
                      <div className="flex items-start gap-2">
                        <div className="bg-primary/10 p-2 rounded-full">
                          <FileText className="h-4 w-4 text-primary" />
                        </div>
                        <div>
                          <p className="font-medium">Scene Cards</p>
                          <p className="text-muted-foreground">Visualize and reorganize your story</p>
                        </div>
                      </div>
                    </div>
                    <Button onClick={createNewStructure}>Create Your First Structure</Button>
                  </div>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </main>
      
      <Footer />
    </div>
  );
};

export default Dashboard;
